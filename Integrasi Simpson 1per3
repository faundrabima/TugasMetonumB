import numpy as np
import time

def f(x):
    return 4 / (1 + x**2)

def simpsons_rule(a, b, N):
    if N % 2 == 1:
        raise ValueError("N must be an even number.")
    h = (b - a) / N
    x = np.linspace(a, b, N+1)
    y = f(x)
    S = y[0] + y[-1] + 4 * np.sum(y[1:N:2]) + 2 * np.sum(y[2:N-1:2])
    return (h / 3) * S

# Testing the implementation
N_values = [10, 100, 1000, 10000]
pi_reference = 3.14159265358979323846

for N in N_values:
    start_time = time.time()
    pi_approx = simpsons_rule(0, 1, N)
    end_time = time.time()
    rms_error = np.sqrt((pi_approx - pi_reference)**2)
    execution_time = end_time - start_time
    print(f"N = {N}:")
    print(f"Pi approximation = {pi_approx}")
    print(f"RMS Error = {rms_error}")
    print(f"Execution Time = {execution_time} seconds")
    print("-" * 30)
